version: "3.8"

services:
  # Banco de dados PostgreSQL
  postgres:
    image: postgres:16-alpine
    container_name: elastic_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: elastic_code
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - elastic_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d elastic_code"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend NestJS
  backend:
    build:
      context: ./back
      dockerfile: Dockerfile
      target: production
    container_name: elastic_backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/elastic_code
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      PORT: 3000
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - elastic_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React
  frontend:
    build:
      context: ./front
      dockerfile: Dockerfile
      target: production
    container_name: elastic_frontend
    restart: unless-stopped
    environment:
      BACKEND_URL: http://backend:3000
    ports:
      - "80:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - elastic_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

# Volumes para persistência de dados
volumes:
  postgres_data:
    driver: local

# Rede personalizada
networks:
  elastic_network:
    driver: bridge
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - elastic_network
    healthcheck:
      test:
        ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # RabbitMQ para mensageria
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: elastic_rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: rabbit
      RABBITMQ_DEFAULT_PASS: rabbit123
    ports:
      - "5672:5672"
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - elastic_network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend NestJS
  backend:
    build:
      context: ./back
      dockerfile: Dockerfile
      target: production
    container_name: elastic_backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/elastic_code
      REDIS_URL: redis://redis:6379
      ELASTICSEARCH_URL: http://elasticsearch:9200
      RABBITMQ_URL: amqp://rabbit:rabbit123@rabbitmq:5672
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      PORT: 3000
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - elastic_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React
  frontend:
    build:
      context: ./front
      dockerfile: Dockerfile
      target: production
    container_name: elastic_frontend
    restart: unless-stopped
    environment:
      BACKEND_URL: http://backend:3000
    ports:
      - "80:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - elastic_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

# Volumes para persistência de dados
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  rabbitmq_data:
    driver: local

# Rede personalizada
networks:
  elastic_network:
    driver: bridge
